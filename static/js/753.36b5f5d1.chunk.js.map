{"version":3,"file":"static/js/753.36b5f5d1.chunk.js","mappings":"iKACA,QAAmC,sC,uBCCnC,MA4CA,EA5CgCA,IAE5B,IAAKC,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,IAClCC,EAAQC,IAAaF,EAAAA,EAAAA,UAASH,EAAMI,SAEzCE,EAAAA,EAAAA,YAAU,KACND,EAAUL,EAAMI,OAAO,GACxB,CAACJ,EAAMI,SAeV,OACIG,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACMP,IACEQ,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAAA,QAAMC,cAjBGC,KACrBT,GAAY,EAAK,EAgBiCM,SACjCR,EAAMI,QAAU,cAI5BH,IACGQ,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAAA,SAAOG,SAfCC,IACpBR,EAAUQ,EAAEC,cAAcC,MAAM,EAebC,OArBIC,KACvBf,GAAY,GACZF,EAAMkB,aAAad,EAAO,EAoBPe,WAAW,EACXJ,MAAOX,EACPgB,KAAK,aAGlB,E,kCCtCd,MAyCA,GAF6BC,EAAAA,EAAAA,GAAU,CAACC,KAAM,eAAgBC,oBAAoB,GAArDF,EAvCLG,IAAqC,IAApC,aAACC,EAAY,QAAEC,EAAO,MAAEC,GAAMH,EAEnD,OAAOjB,EAAAA,EAAAA,MAAA,QAAMqB,SAAUH,EAAcI,OAAO,GAAErB,SAAA,EAC1CC,EAAAA,EAAAA,KAAA,OAAAD,SAAK,eAEDsB,EAAAA,EAAAA,IAAY,YAAa,WAAY,GAAIC,EAAAA,KAE7CtB,EAAAA,EAAAA,KAAA,OAAAD,SAAK,oBAEDsB,EAAAA,EAAAA,IAAY,GAAI,iBAAkB,GAAIC,EAAAA,GAAO,CAACX,KAAM,cAExDX,EAAAA,EAAAA,KAAA,OAAAD,SAAK,4BAEDsB,EAAAA,EAAAA,IAAY,yBAA0B,4BAA6B,GAAIE,EAAAA,KAE3EvB,EAAAA,EAAAA,KAAA,OAAAD,SAAK,cAEDsB,EAAAA,EAAAA,IAAY,UAAW,UAAW,GAAIE,EAAAA,KAE1CvB,EAAAA,EAAAA,KAAA,OAAAD,SAAK,cAEDyB,OAAOC,KAAKR,EAAQS,UAAUC,KAAIC,IACvB9B,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACHD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CAAM6B,EAAI,QAENP,EAAAA,EAAAA,IAAY,GAAGO,IAAO,YAAYA,IAAO,GAAIN,EAAAA,SAK5DJ,IACGlB,EAAAA,EAAAA,KAAA,OAAAD,SACKmB,KAGTlB,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,WACL,ICWL8B,EAAetC,IACVO,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACFR,EAAMuC,UACH9B,EAAAA,EAAAA,KAAA,UAAQ+B,QAASxC,EAAMyC,aAAajC,SAAC,UAEzCD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CAAK,YACSR,EAAM0B,QAAQgB,aAE5BnC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CAAK,aACUR,EAAM0B,QAAQiB,YAE7BpC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CAAK,sBACmBR,EAAM0B,QAAQkB,eAAiB,MAAQ,SAE/DrC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CAAK,8BAC2BR,EAAM0B,QAAQmB,8BAE9CtC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CAAK,YAGGyB,OAAOC,KAAKlC,EAAM0B,QAAQS,UAAUC,KAAIC,IAC7B5B,EAAAA,EAAAA,KAACqC,EAAO,CAAWC,aAAcV,EAAKW,aAAchD,EAAM0B,QAAQS,SAASE,IAA7DA,WAS5BS,EAAUtB,IAAmC,IAAlC,aAACuB,EAAY,aAAEC,GAAaxB,EAChD,OAAOjB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CAAMuC,EAAa,MAAIC,IAAmB,EAGrD,EA7EqBhD,IAEjB,IAAKC,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,GAGvC,IAAKH,EAAM0B,QACP,OAAOjB,EAAAA,EAAAA,KAACwC,EAAAA,EAAS,IAiBrB,OAAQxC,EAAAA,EAAAA,KAAA,OAAAD,UACAD,EAAAA,EAAAA,MAAA,OAAK2C,UAAWC,EAAmB3C,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,OAAK2C,IAAKpD,EAAM0B,QAAQ2B,OAAOC,OAASC,EAAWC,IAAI,KACtDxD,EAAMuC,UACH9B,EAAAA,EAAAA,KAAA,SAAOW,KAAM,OAAQR,SAlBRC,IACrBA,EAAE4C,OAAOC,MAAMC,QACf3D,EAAM4D,UAAU/C,EAAE4C,OAAOC,MAAM,GACnC,IAiBSzD,IACGQ,EAAAA,EAAAA,KAACoD,EAAoB,CAACC,cAAe9D,EAAM0B,QAASE,SAflDmC,IACd/D,EAAMgE,YAAYD,GAAUE,MACxB,KACI/D,GAAY,EAAM,GAEzB,EAUmFwB,QAAS1B,EAAM0B,WAEzFzB,IACEQ,EAAAA,EAAAA,KAAC6B,EAAW,CAACG,aAAcA,KACvBvC,GAAY,EAAK,EAClBqC,QAASvC,EAAMuC,QAASb,QAAS1B,EAAM0B,WAE9CjB,EAAAA,EAAAA,KAACyD,EAAsB,CAAC9D,OAAQJ,EAAMI,OAAQc,aAAclB,EAAMkB,mBAEpE,E,cC9Cd,QAA6B,4BAA7B,EAAiE,uBCAjE,EAAuB,mBCevB,EAdclB,IAENO,EAAAA,EAAAA,MAAA,OAAK2C,UAAWC,EAAO3C,SAAA,EACnBC,EAAAA,EAAAA,KAAA,OACI2C,IAAI,2GACJI,IAAI,KACPxD,EAAMmE,SACP1D,EAAAA,EAAAA,KAAA,OAAAD,UACID,EAAAA,EAAAA,MAAA,QAAAC,SAAA,CAAM,QAAMR,EAAMoE,WAAW,Y,cCH7C,MAAMC,EAAWrE,IACb,IAAIsE,EAAetE,EAAMuE,MAAMnC,KAAIoC,IAAQ/D,EAAAA,EAAAA,KAACgE,EAAI,CAAeN,QAASK,EAAKL,QAASO,WAAYF,EAAKE,YAAjDF,EAAKG,MAO3D,OAFAC,QAAQC,IAAI,WAGRtE,EAAAA,EAAAA,MAAA,OAAK2C,UAAWC,EAAa3C,SAAA,EACzBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,aACJC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACqE,EAAmB,CAAClD,SAThBmD,IACb/E,EAAMgF,QAAQD,EAAOE,YAAY,OAU7BxE,EAAAA,EAAAA,KAAA,OAAKyC,UAAWC,EAAQ3C,SACnB8D,MAEH,EAaRQ,GAAsBzD,EAAAA,EAAAA,GAAU,CAACC,KAAM,kBAAjBD,EATJrB,IACbO,EAAAA,EAAAA,MAAA,QAAMqB,SAAU5B,EAAMyB,aAAcI,OAAO,GAAErB,SAAA,EAChDC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACyE,EAAAA,EAAK,CAACC,UAAW,WAAYC,KAAM,mBAExC3E,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,kBAMhB,EAAe6E,EAAAA,KAAWhB,GClB1B,GAFyBiB,EAAAA,EAAAA,KAfAC,IACd,CACHhB,MAAOgB,EAAMC,YAAYjB,UAKLkB,IACjB,CACHT,QAAUC,IACNQ,GAASC,EAAAA,EAAAA,IAAqBT,GAAa,KAK9BK,CAA6CjB,GCNtE,EATiBrE,IAETO,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAACkF,EAAW,CAAC3B,YAAahE,EAAMgE,YAAaJ,UAAW5D,EAAM4D,UAAWrB,QAASvC,EAAMuC,QAASb,QAAS1B,EAAM0B,QAAStB,OAAQJ,EAAMI,OAAQc,aAAclB,EAAMkB,gBACnKT,EAAAA,EAAAA,KAACmF,EAAgB,O,cCO7B,MAAMC,UAAyBR,EAAAA,UAE3BS,cAAAA,GACI,IAAIC,EAAYC,KAAKhG,MAAMiG,OAAOF,UAC7BA,IACDA,EAAYC,KAAKhG,MAAMkG,kBAK3BF,KAAKhG,MAAMmG,gBAAgBJ,GAC3BC,KAAKhG,MAAMoG,eAAeL,EAC9B,CAEAM,iBAAAA,GACIL,KAAKF,gBACT,CAEAQ,kBAAAA,CAAmBC,EAAWC,EAAWC,GACjCT,KAAKhG,MAAMiG,OAAOF,WAAaQ,EAAUN,OAAOF,WAChDC,KAAKF,gBAEb,CAEAY,MAAAA,GACI,OACIjG,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACkG,EAAO,IAAKX,KAAKhG,MACTuC,SAAUyD,KAAKhG,MAAMiG,OAAOF,UAC5BrE,QAASsE,KAAKhG,MAAM0B,QACpBtB,OAAQ4F,KAAKhG,MAAMI,OACnBc,aAAc8E,KAAKhG,MAAMkB,aACzB0C,UAAWoC,KAAKhG,MAAM4D,aAG3C,EAIJ,MAOA,GAAegD,EAAAA,EAAAA,KACXtB,EAAAA,EAAAA,KARqBC,IAAK,CAC1B7D,QAAS6D,EAAMC,YAAY9D,QAC3BtB,OAAQmF,EAAMC,YAAYpF,OAC1B8F,iBAAkBX,EAAMsB,KAAKlC,GAC7BmC,OAAQvB,EAAMsB,KAAKC,UAIM,CAACC,eAAc,IAAEZ,gBAAe,KAAEC,eAAc,KAAElF,aAAY,KAAE0C,UAAS,KAAEI,YAAW,QAtDnH,SAAoBgD,GAChB,OAAO,SAAiBhH,GACpB,MAAMiG,GAASgB,EAAAA,EAAAA,KACf,OAAOxG,EAAAA,EAAAA,KAACuG,EAAS,IAAKhH,EAAOiG,OAAQA,GACzC,CACJ,GAgDA,CAGEJ,E","sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://react-1/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://react-1/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__koz-B\"};","import {useEffect, useState} from \"react\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>\r\n                        {props.status || '-------'}\r\n                    </span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange}\r\n                           onBlur={deactivateEditMode}\r\n                           autoFocus={true}\r\n                           value={status}\r\n                           type=\"text\"/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileStatusWithHooks;\r\n\r\n","import {createField, Input, Textarea} from \"../../common/FormControls/FormControls\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {Contact} from \"./ProfileInfo\";\r\n\r\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {\r\n\r\n    return <form onSubmit={handleSubmit} action=\"\">\r\n        <div>Full name</div>\r\n        {\r\n            createField('Full name', 'fullName', [], Input)\r\n        }\r\n        <div>lookingForAJob</div>\r\n        {\r\n            createField('', 'lookingForAJob', [], Input, {type: 'checkbox'})\r\n        }\r\n        <div>My professional skills</div>\r\n        {\r\n            createField('My professional skills', 'lookingForAJobDescription', [], Textarea)\r\n        }\r\n        <div>About Me</div>\r\n        {\r\n            createField('AboutMe', 'aboutMe', [], Textarea)\r\n        }\r\n        <div>Contacts:</div>\r\n        {\r\n            Object.keys(profile.contacts).map(key => {\r\n                return <div>\r\n                    <div>{key}:</div>\r\n                    {\r\n                        createField(`${key}`, `contacts.${key}`, [], Input)\r\n                    }\r\n                </div>\r\n            })\r\n        }\r\n        {error &&\r\n            <div>\r\n                {error}\r\n            </div>\r\n        }\r\n        <button>Save</button>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormRedux = reduxForm({form: 'edit-profile', enableReinitialize: true})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormRedux;","import s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from '../../../assets/images/userImage.webp'\r\nimport {useState} from \"react\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport ProfileDataFormRedux from \"./ProfileDataForm\";\r\n\r\nconst ProfileInfo = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n        props.saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false)\r\n            }\r\n        )\r\n    }\r\n\r\n    return (<div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large || userPhoto} alt=\"\"/>\r\n                {props.isOwner &&\r\n                    <input type={'file'} onChange={onMainPhotoSelected}/>\r\n                }\r\n                {editMode &&\r\n                    <ProfileDataFormRedux initialValues={props.profile} onSubmit={onSubmit} profile={props.profile}/>\r\n                }\r\n                {!editMode &&\r\n                    <ProfileData goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }} isOwner={props.isOwner} profile={props.profile}/>\r\n                }\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst ProfileData = (props) => {\r\n    return <div>\r\n        {props.isOwner &&\r\n            <button onClick={props.goToEditMode}>Edit</button>\r\n        }\r\n        <div>\r\n            My name: {props.profile.fullName}\r\n        </div>\r\n        <div>\r\n            about Me: {props.profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            Looking for a job: {props.profile.lookingForAJob ? 'yes' : 'no'}\r\n        </div>\r\n        <div>\r\n            lookingForAJobDescription: {props.profile.lookingForAJobDescription}\r\n        </div>\r\n        <div>\r\n            Contacts:\r\n            {\r\n                Object.keys(props.profile.contacts).map(key => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key]}/>\r\n                })\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n\r\nexport const Contact = ({contactTitle, contactValue}) => {\r\n    return <div>{contactTitle} : {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__71-vS\",\"posts\":\"MyPosts_posts__K6Er9\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__BA5PW\"};","import s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src=\"https://avatars.mds.yandex.net/i?id=18a8baedb51cd982584702a3204c6bc34471b8c7-11923369-images-thumbs&n=13\"\r\n                alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like({props.likeCounts})</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\n\r\n\r\n\r\nconst MyPosts = (props) => {\r\n    let postsElement = props.posts.map(post => <Post key={post.id} message={post.message} likesCount={post.likesCount}/>)\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n    console.log('Render')\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>my post</h3>\r\n            <div>\r\n                <AddNewPostFormRedux onSubmit={onAddPost} />\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst AddNewPostForm = (props) => {\r\n    return <form onSubmit={props.handleSubmit} action=\"\">\r\n        <div>\r\n            <Field component={'textarea'} name={'newPostText'} />\r\n        </div>\r\n        <button>Add post</button>\r\n    </form>\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm({form: 'AddNewPostForm'})(AddNewPostForm)\r\n\r\nexport default React.memo(MyPosts);","import {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        // newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import s from './Profile.module.css';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo saveProfile={props.saveProfile} savePhoto={props.savePhoto} isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus}  />\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport Profile from \"./Profile\";\r\nimport {getUsersProfile, getUsersStatus, saveProfile, savePhoto, setUserProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {compose} from \"redux\";\r\n\r\n// HOC для передачи параметров URL в классовый компонент\r\nfunction withRouter(Component) {\r\n    return function Wrapper(props) {\r\n        const params = useParams();\r\n        return <Component {...props} params={params}/>;\r\n    };\r\n}\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let profileId = this.props.params.profileId;\r\n        if (!profileId) {\r\n            profileId = this.props.authorizedUserId;\r\n            // if(!profileId) {\r\n            //     this.props.history.push('/login')\r\n            // }\r\n        }\r\n        this.props.getUsersProfile(profileId)\r\n        this.props.getUsersStatus(profileId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.params.profileId != prevProps.params.profileId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         isOwner={!this.props.params.profileId}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                         savePhoto={this.props.savePhoto}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// Получение данных из Redux Store\r\nconst mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {setUserProfile, getUsersProfile, getUsersStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer)\r\n\r\n"],"names":["props","editMode","setEditMode","useState","status","setStatus","useEffect","_jsxs","children","_jsx","onDoubleClick","activateEditMode","onChange","e","currentTarget","value","onBlur","deactivateEditMode","updateStatus","autoFocus","type","reduxForm","form","enableReinitialize","_ref","handleSubmit","profile","error","onSubmit","action","createField","Input","Textarea","Object","keys","contacts","map","key","ProfileData","isOwner","onClick","goToEditMode","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Contact","contactTitle","contactValue","Preloader","className","s","src","photos","large","userPhoto","alt","target","files","length","savePhoto","ProfileDataFormRedux","initialValues","formData","saveProfile","then","ProfileStatusWithHooks","message","likeCounts","MyPosts","postsElement","posts","post","Post","likesCount","id","console","log","AddNewPostFormRedux","values","addPost","newPostText","Field","component","name","React","connect","state","profilePage","dispatch","addPostActionCreator","ProfileInfo","MyPostsContainer","ProfileContainer","refreshProfile","profileId","this","params","authorizedUserId","getUsersProfile","getUsersStatus","componentDidMount","componentDidUpdate","prevProps","prevState","snapshot","render","Profile","compose","auth","isAuth","setUserProfile","Component","useParams"],"sourceRoot":""}